<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AABAREQCQEREA0BERANAREQDQEREA0BERANAREQDQEREA0BERANAREQDQEREA0BERANAREQDQEREA0BE
        RANAREQDQEREA0BERANAREQDQEREA0BERANAREQDQEREA0BERANAREQDQEREA0BERANAREQDQEREA0BE
        RANAREQDQEREA0BERANAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBE
        RARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBE
        RARAREQEQEREBEBERARAREQDQEREA0BERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBE
        RARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBE
        RARAREQEQEREBEBERARAREQEQEREBEBERANAREQDQEREBEBERARAREQEQEREBEBERAQ5OkIEFQ85AgAA
        JwECAC0CJiI+Az5BRARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBE
        RARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREA0BERANAREQEQEREBEBERAQ2N0EDAAAlAWuB
        Tgh/nVIcgqJTK4KiUyd7mFIUVWRHAxgTNQE9QEMEQERDBEBDOwRBQCwDQj0WA0M5AgNDNgACRDQAAkQ2
        AAJDOQEDQjwRA0FAKQNAQjkEQERCBEBERARAREQEQEREBEBERARAREQDQEREA0BERARAREQEHRU6AniU
        UAyFp1RTh6pVqYiqVdiIqlXoiKpV5IiqVcyHqVSNg6RUM1JhSAM4QGMEPk6EBzxTpg08VbMTPFa5GTxW
        vBw8Vr0ePFa8HTxWuhk8VbQUPFOpDj1PiwhBPj0DWQIAAGcAAABFMhACQEM7BEBERQNAREQDQEREBAQA
        NAKBoVMdh6lUn4iqVfaIqlX/iKpV/4iqVf+IqlX/iKpV/4iqVf+IqlXjh6lTZz5cw1E7WMytO1nMvztZ
        zMw7Wc3VO1nN2TtZzds7Wc3aO1nN1jtZzM47WczCO1nMsDtYzJc7WMt2O1jITDtXvyI+TYIHQEI5A0BE
        RAMdEzwDfpxSFYeqVa2IqlX/iKpV/4iqVfGHqVWNh6lUeYepVHiHqlW5iKpV/4iqVf+Iq1TydZZxiztY
        zcg7Wc3/O1nN/ztZzf87Wc3/O1nN/ztZzf87Wc3/O1nN/ztZzf87Wc3/O1nN/ztZzf87Wc34O1nN3DtY
        yEsoqf8APD5DAzY2QgOHqVR8iKpV/YiqVf+IqlX/iKpV5IepVCSUuVwAkLRZAIeqVXiIqlX/iKpV/4iq
        Vf+JrFPhWnqahDpYzvE7Wc3/O1nN/ztZzf87Wc3/O1nN/ztZzf87Wc3/O1nN/ztZzf87Wc3/O1nN/ztZ
        zf87Wc37O1jJVTJ+/wAAAAMBgaBTI4iqVdqIqlX/iKpV/4iqVf+IqlXlgqJTJwAALAIAAAAAh6lUe4iq
        Vf+IqlX/iKpV/4irVP+CpF2jPFnLvjtZzf87Wc3/O1nN/ztZzf87Wc3/O1nN/ztZzf07Wc3/O1nN/ztZ
        zf87Wc3/O1nN/ztZzec7V8Mu/wAAAP//cACGp1RYiKpV/IiqVe2HqVSIh6lUeoaoVG57mFIUJR4+AwUA
        NgKEpVQ7h6lUfIepVHiHqlWyiKpV/4mrU9NHZrmYOljNsTtYzdw7WM3/OljN/zpYzf87WM3rO1jMpztZ
        zfg7Wc3/O1nN/ztZzf87Wc3/O1jMoD1QlQlBQCkC//+CAIepVH2IqlX/iKpV24aoVBuWvF8AJSQuAT1A
        QgNAREQEQEREBDg7PwIAAAAAjrNZAIeqVWuIqlX/iaxT6ld2n4U3VM9APVzJQUl41dpQiNr/SXjW5z1d
        y1g7VsYqO1nN4ztZzf87Wc3/O1nN9ztZzLM7V8QnRTAAAkBERAP//7MAh6lUhoiqVf+IqlXcf59THQAA
        AAARCzkCOz5DBEBERARARUQELS1AAwYANgL//3YAhqhUbIiqVf+Iq1PvYH+RdC5Eyhxlt+NRZLXm7mS2
        5/9kteb0Y7PjXzZFqQ47WczGO1nN6ztZzKY7WMhQPFW1EUQ4DwJAREQEQEREA///cgCGqFRwiKpV/4iq
        VeCEpFQ2f55THX+dUxxkd0wIOz1DBDg5QgR4k1EQgJ9TH36dUxuHqVR8iKpV/4irVOZkhIdJPWTKEmO0
        5a9ktef/ZLbn/2S15/9jtOW8Uoa+ETtXyFI7V8U1PVCaCF8AAABCPi0DQEREBEBERARAREQD//+BAISm
        VECIqlXyiKpV+4iqVeCIqlXdh6pVxYGgUyIAADMCAAAAAYaoVGqIqlXeiKpV24iqVeuIqlX/h6pVwXqT
        Rw9ZnswPZ7nrxmzA8/9uw/f/bcH1/2i67dJfqNMWAAAAAEguCgFBQjcEQEREBEBERARAREQEQEREBEBE
        RAMaDjsCeJRREIeqVbiIqlX/iKpV/4iqVf+IqlXkgqJTJv///wD//4AAh6lUeoiqVf+IqlX/iKpV/4iq
        Vf2GqFRv////AGy87ipwxfrfccf8/3HH/P9yx/z/ccb77G7B9EEAAAABQEREBEBERARAREQEQEREBEBE
        RARAREQEQEREA0BERAMAABUBhadUR4iqVeqIqlX/iKpV/4iqVeeEpVQ+f55THH+dUxuHqVSIiKpV/4iq
        Vf+IqlX/h6pVu36dURf///8Accb6hHHH/P9xx/z/ccf8/3HH/P9xx/z/ccb7p2Ccwgc5MSoDQEREBEBE
        RARAREQEQEREBEBERARAREQDQEREAzs9QwRXZUgFhqhUZoiqVeyIqlX/iKpV+4iqVeGIqlXbiKpV24iq
        VeyIqlX/iKpV/4eqVcmEpVQw////AG/B8zRxx/zaccf8/3HH/P9xx/z/ccf8/3HH/P9xx/zscMP3TxkA
        AAI/QUAEQEREBEBERARAREQEQEREBEBERANAREQDQEREBDc4QgNidksFhadUTIeqVcGIqlX3iKpV/4iq
        Vf+IqlX/iKpV/4iqVeuHqVSbgqNTJv///wBruOccccb6wnHH/P9xx/z/ccf8/3HH/P9xx/z/ccf8/3HH
        /P9xxvrabr/wMQAAAAJAREQEQEREBEBERARAREQEQEREA0BERANAREQEQEREBDw+QwQHADABfJpSFIWn
        VE2HqVSCh6lUm4epVJWGqFRyhKRUNnGLTwgdFzkCAAAAAHDE+GZzt+L+csP2/3HH/P9xx/z/ccf8/3HH
        /P9xx/z/ccX5/3O34f9xxPeLHAAAAj9CQgRAREQEQEREBEBERARAREQDQEREA0BERARAREQEQEREBEBE
        RAQtLD4DAAAcAA8MKQEyMkADKCU8AwAAFwAVETEBODlCBEBERAQAAAAAcbroXXWfufdywvP/ccj+/3HI
        /v9xyP7/ccj+/3HH/P9yxfn/daG8/XK34n4cFg4CP0NCBEBERARAREQEQEREBEBERANAREQDQEREBEBE
        RARAREQEQEREBEBERARAREQEQEREBD9CRAQ/Q0QEQEREBEBERARAREQEQEREBCklHwNuf4kWeIKJzXOz
        2/9yu+n/dKzP/3Wmxv9ztN3/ccf7/3LB8v93jZvgc32DJgIAAAJAREQEQEREBEBERARAREQEQEREA0BE
        RANAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEMTY2A21s
        bBF5eXrIeIeS/3iCiv95env/eXl5/3iBh/9zuOP/dK7S/3l8f9xzcXAeExsaAkBERARAREQEQEREBEBE
        RARAREQDQEREA0BERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBE
        RAQ2OzsDaGpqDXl5er15eXn/eXl5/3l5ev95eXr/eXl6/3eRov94iJP/eXh52XJzdB0YHx4CQEREBEBE
        RARAREQEQEREBEBERANAREQDQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBE
        RARAREQEQEREBD9DQwQhJyYDeHh5hnl5ev95eXr/eXl6/3l5ev95eXr/eXl5/3l5ef95eXqsZWdnCzc8
        PANAREQEQEREBEBERARAREQEQEREA0BERANAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBE
        RARAREQEQEREBEBERARAREQEQEREBAQMCwJ1dXYmeXl6ynl5ev95eXr/eXl6/3l5ev95eXr/eXl673d4
        eU4AAAABQEREBEBERARAREQEQEREBEBERARAREQDQEREA0BERARAREQEQEREBEBERARAREQEQEREBEBE
        RARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBB4kIwJ1dnYqeXl6lXl5es95eXrdeXl61nl5
        erN4eHlWYGFiBzo/PwRAREQEQEREBEBERARAREQEQEREBEBERANAREQDQEREBEBERARAREQEQEREBEBE
        RARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEP0NDBCgsLAJbXF0Fb3BxFnNz
        dCBxcnMaZmdoCiMnJwE8QUAEQEREBEBERARAREQEQEREBEBERARAREQEQEREA0BERANAREQEQEREBEBE
        RARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBD1B
        QQQoLi4DDxYVAh8lJAI5PT0DQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQDQEREA0BE
        RARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBE
        RARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBE
        RANAREQDQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBE
        RARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBERARAREQEQEREBEBE
        RARAREQEQEREA0BERAJAREQDQEREA0BERANAREQDQEREA0BERANAREQDQEREA0BERANAREQDQEREA0BE
        RANAREQDQEREA0BERANAREQDQEREA0BERANAREQDQEREA0BERANAREQDQEREA0BERANAREQDQEREA0BE
        RANAREQDQEREA0BERANAREQCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAAAAAAAEAwAABAEAAAYAA
        AACEGAAAhAgAAIAAABCAAACAAMCAAAAAgAAAAQAAAAIAAAACAAACIgAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>